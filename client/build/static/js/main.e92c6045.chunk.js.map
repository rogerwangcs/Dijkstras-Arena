{"version":3,"sources":["screens/MainMenu.jsx","screens/Lobby.jsx","utils/graphOptions.js","components/GameOverlayIntro.jsx","utils/PriorityQueue.js","utils/dijkstras.js","screens/Intro.jsx","components/GameOverlayLearn.jsx","screens/Learn.jsx","components/GameOverlay.jsx","screens/GameContainer.jsx","App.jsx","serviceWorker.js","index.js","utils/generateGraph_Single.js"],"names":["SMainMenu","styled","div","particleParams","number","value","density","enable","value_area","color","shape","type","stroke","width","polygon","nb_sides","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","StyledParticles","SButton","MainMenu","props","state","Fragment","params","onClick","history","href","target","rel","Component","withRouter","SLobby","Lobby","onInput","e","preventDefault","setState","name","submitQueue","length","queued","enterQueue","substring","localStorage","setItem","alert","getItem","this","style","fontSize","onSubmit","onChange","placeholder","height","autoResize","physics","enabled","repulsion","nodeDiatance","centralGravity","springLength","springConstant","damping","solver","nodes","fixed","x","y","borderWidth","borderWidthSelected","border","font","align","edges","highlight","hover","strokeWidth","arrows","to","scaleFactor","from","interaction","dragNodes","dragView","zoomView","selectConnectedEdges","SGameOverlayLearn","SScore","DistanceContainer","teacher","PQContainer","DistanceItem","PQItem","ExploreContainer","GameOverlayLearn","step","Distances","Object","keys","allDistances","map","nodeId","className","PQueue","allPQ","node","data","priority","exploreOptions","option","score","stepFn","PriorityQueue","maxSize","isNaN","container","console","log","isFull","currElem","Element","addedFlag","i","splice","isEmpty","shift","prototype","dijkstrasAlgorithm","graph","startNode","adjList","graphObj","forEach","id","edge","weight","label","createAdjListGraph","distances","prev","pq","enqueue","Infinity","allPrev","JSON","parse","stringify","minNode","dequeue","currNode","neighbor","alt","contain","update","finalDistances","colors","localNode","localVisited","normal","highlighted","vel","Intro","componentDidMount","setTimeout","renderGraph","componentDidUpdate","handleClick","network","on","obj","net","unselectAll","entries","currentNode","getConnectedNodes","includes","nextNodeId","traversedEdgeId","edgeWeight","newState","getConnectedEdges","edgeId","body","node1","fromId","node2","toId","options","index","visitedNodes","indexOf","visitedEdges","clearSelection","selectNodesFromList","selectEdgesFromList","selectNode","selectEdges","forceUpdate","background","getAdjNodes","adjNodes","values","getNetwork","getEdges","getNodes","generatedGraph","generateGraph_Single","dijkstras","dijkstra","endNode","shortestPaths","currentWeight","margin","graphOptions","vis","GameOverlayIntro","defaultGraph","HeadText","h1","active","Node","startTeacher","text","showW","isComplete","isLevelComplete","level","top","left","right","nextLevel","Learn","selectEdgeFromList","edgeB","ProgressBar","require","SGameOverlay","SMoveProgress","moving","GameOverlay","componentWillReceiveProps","newProps","progress","Circle","easing","fill","animate","destroy","progressBar","playerName","playerScore","opponentName","opponentScore","socketUrl","remoteNode","remoteVisited","finalNode","select","event","GameContainer","socket","io","query","activateSockets","emit","game","gameState","opponentId","players","player","gameId","gameGraph","playerId","endGame","winner","winnerScore","loserScore","componentWillUnmount","disconnect","addToMatchHistory","sendPlayerMove","nextNode","result","matches","vertices","u","v","opponent","finalNodeId","Math","pow","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","vadjust","String","fromCharCode","floor","dist","exp"],"mappings":"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","file":"static/js/main.e92c6045.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport Particles from \"react-particles-js\";\nimport styled from \"styled-components\";\n\nconst theme = {\n  primary: \"#2453c9\",\n  creme: \"#fffcf5\"\n};\n\nconst SMainMenu = styled.div`\n  position: relative;\n  z-index: 100;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n\n  padding-top: 10vh;\n\n  h1 {\n    color: white;\n    font-size: 5em;\n    margin-bottom: 10vh;\n  }\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 2.5em;\n      margin: 15px 0px 10vh;\n    }\n  }\n`;\n\nconst particleParams = {\n  number: {\n    value: 1,\n    density: {\n      enable: true,\n      value_area: 800\n    }\n  },\n  color: {\n    value: \"#ffffff\"\n  },\n  shape: {\n    type: \"circle\",\n    stroke: {\n      width: 0,\n      color: \"#000000\"\n    },\n    polygon: {\n      nb_sides: 5\n    }\n  },\n  opacity: {\n    value: 1,\n    random: false,\n    anim: {\n      enable: false,\n      speed: 1,\n      opacity_min: 0.1,\n      sync: false\n    }\n  },\n  size: {\n    value: 10,\n    random: true,\n    anim: {\n      enable: false,\n      speed: 40,\n      size_min: 0.1,\n      sync: false\n    }\n  },\n  line_linked: {\n    enable: true,\n    distance: 150,\n    color: \"#ffffff\",\n    opacity: 1,\n    width: 1\n  },\n  move: {\n    enable: true,\n    speed: 6,\n    direction: \"none\",\n    random: false,\n    straight: false,\n    out_mode: \"out\",\n    bounce: false,\n    attract: {\n      enable: false,\n      rotateX: 600,\n      rotateY: 1200\n    }\n  },\n  interactivity: {\n    detect_on: \"canvas\",\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\"\n      },\n      onclick: {\n        enable: false,\n        mode: \"push\"\n      },\n      resize: true\n    },\n    modes: {\n      grab: {\n        distance: 400,\n        line_linked: {\n          opacity: 1\n        }\n      },\n      bubble: {\n        distance: 400,\n        size: 40,\n        duration: 2,\n        opacity: 8,\n        speed: 3\n      },\n      repulse: {\n        distance: 200,\n        duration: 0.4\n      },\n      push: {\n        particles_nb: 4\n      },\n      remove: {\n        particles_nb: 2\n      }\n    }\n  }\n};\n\nconst StyledParticles = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n  z-index: 0;\n`;\n\nconst SButton = styled.div`\n  div {\n    display: inline-block;\n    background-color: ${theme.primary};\n    margin: 15px;\n    padding: 15px 50px;\n    border-radius: 50px;\n    p,\n    a {\n      transition: all 100ms ease-out;\n      font-size: 1.5em;\n      color: white;\n    }\n\n    :hover {\n      cursor: pointer;\n      p,\n      a {\n        color: limegreen;\n      }\n    }\n  }\n`;\n\nclass MainMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <StyledParticles>\n          <Particles params={particleParams} />\n        </StyledParticles>\n        <SMainMenu>\n          <h1>Dijkstra's Arena</h1>\n          {/*\n        <SButton onClick={() => this.props.history.push(\"/intro\")}>\n          <div>\n            <p>Introduction</p>\n          </div>\n         </SButton>\n         */}\n          <SButton onClick={() => this.props.history.push(\"/learn\")}>\n            <div>\n              <p>Learn Dijkstra</p>\n            </div>\n          </SButton>\n          <SButton onClick={() => this.props.history.push(\"/game\")}>\n            <div>\n              <p>Compete</p>\n            </div>\n          </SButton>\n          <SButton>\n            <div>\n              <a\n                href=\"https://github.com/rogerwangcs/Dijkstras-Arena\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Algorithms Report\n              </a>\n            </div>\n          </SButton>\n          <SButton>\n            <div>\n              <a\n                href=\"https://github.com/rogerwangcs/Dijkstras-Arena\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Source Code\n              </a>\n            </div>\n          </SButton>\n        </SMainMenu>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(MainMenu);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router\";\n\nconst SLobby = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n\n  h1 {\n    color: white;\n    font-size: 5em;\n    margin: 100px;\n  }\n  h2 {\n    color: white;\n    font-size: 2em;\n    margin: 100px;\n  }\n`;\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props);\n\n    let name = \"\";\n    if (localStorage.getItem(\"playerName\") !== null) {\n      name = localStorage.getItem(\"playerName\");\n    }\n\n    this.state = {\n      name: name,\n      queued: false\n    };\n  }\n\n  onInput = e => {\n    e.preventDefault();\n    this.setState({ name: e.target.value });\n  };\n\n  submitQueue = () => {\n    if (this.state.name.length > 0) {\n      this.setState({ queued: true });\n      this.props.enterQueue(this.state.name.substring(0, 12));\n      localStorage.setItem(\"playerName\", this.state.name);\n    } else {\n      alert(\"Enter a name\");\n    }\n  };\n\n  render() {\n    return (\n      <SLobby>\n        <h1>Lobby</h1>\n        {this.state.queued ? (\n          <React.Fragment>\n            <h2>Matching with Opponents...</h2>\n            <button\n              style={{ fontSize: \"36px\" }}\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            >\n              Cancel\n            </button>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <form onSubmit={this.submitQueue}>\n              <input\n                value={this.state.name}\n                onChange={this.onInput}\n                placeholder=\"Your name\"\n                style={{ fontSize: \"36px\" }}\n              ></input>\n              <button style={{ fontSize: \"36px\" }} type=\"submit\">\n                Play\n              </button>\n            </form>\n          </React.Fragment>\n        )}\n      </SLobby>\n    );\n  }\n}\n\nexport default withRouter(Lobby);\n","export default {\n  width: \"100%\",\n  height: \"100%\",\n  autoResize: true,\n  physics: {\n    enabled: true,\n    repulsion: {\n      nodeDiatance: 100,\n      centralGravity: 0.2,\n      springLength: 200,\n      springConstant: .05,\n      damping: 0.09,\n    },\n  },\n  solver: \"repulsion\",\n  nodes: {\n    fixed: {\n      x: false,\n      y: false\n    },\n    shape: \"dot\",\n    size: 35,\n    borderWidth: 1,\n    borderWidthSelected: 3,\n    color: {\n      border: \"white\"\n    },\n    font: {\n      size: 25,\n      align: \"center\"\n    }\n  },\n  edges: {\n    width: 5,\n    color: {\n      color: \"#D3D3D3\",\n      highlight: \"#797979\",\n      hover: \"#797979\",\n      opacity: 0.75\n    },\n    font: {\n      size: 25,\n      strokeWidth: 10\n    },\n    arrows: {\n      to: { enabled: false, scaleFactor: 1, type: \"arrow\" },\n      from: { enabled: false, scaleFactor: 1, type: \"arrow\" }\n    }\n  },\n  interaction: {\n    dragNodes: true,\n    dragView: true,\n    zoomView: true,\n    selectConnectedEdges: false\n  }\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst SGameOverlayLearn = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n`;\n\nconst SScore = styled.div`\n  margin-top: 15px;\n  padding: 25px;\n  display: inline-block;\n  background-color: #6a758faa;\n  border-radius: 15px;\n  color: white;\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1em;\n    }\n  }\n`;\n\n// const STeachMe = styled.div`\n// position: absolute;\n// top: 10px;\n// right: 100px;\n// transform: translate(-50%);\n// width: 100px;\n// height: 100px;\n// margin: 25px;\n// border-radius: 50%;\n// background-color: gray;\n// border: 10px solid lightgray;\n// h1 {\n//   line-height: 100px;\n//   font-size: 1.5em;\n//   color: white;\n// }\n// :hover {\n//   cursor: pointer;\n//   background-color: lightgray;\n// }\n// `;\n\nconst DistanceContainer = styled.div`\ndisplay: ${props => props.teacher ? \"block\" : \"none\"};\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst PQContainer = styled.div`\ndisplay: ${props => props.teacher ? \"block\" : \"none\"};\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nconst DistanceItem = styled.div`\n  .block {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    border: 1px solid black;\n    h1 {\n      line-height: 64px;\n      margin: auto;\n      vertical-align: center;\n    }\n\n    @media (max-width: 500px) {\n      width: 24px;\n      height: 24px;\n      h1 {\n        font-size: 1em;\n        line-height: 24px;\n      }\n    }\n  }\n`;\n\nconst PQItem = styled.div`\n  .block {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    border: 1px solid black;\n    /* border-radius: 50%; */\n    h1 {\n      line-height: 64px;\n      margin: auto;\n      vertical-align: center;\n    }\n\n    @media (max-width: 500px) {\n      width: 24px;\n      height: 24px;\n      h1 {\n        font-size: 1em;\n        line-height: 24px;\n      }\n    }\n  }\n`;\n\nconst ExploreContainer = styled.div`\n  display: ${props => props.teacher ? \"block\" : \"none\"};\n  position: absolute;\n  top: 75vh;\n  left: 50%;\n  transform: translate(-50%);\n  display: flex;\n  .node {\n    display: ${props => props.teacher ? \"block\" : \"none\"};\n    width: 100px;\n    height: 100px;\n    margin: 25px;\n    border-radius: 50%;\n    background-color: gray;\n    border: 10px solid lightgray;\n    h1 {\n      line-height: 100px;\n      font-size: 3em;\n      color: white;\n    }\n    :hover {\n      cursor: pointer;\n      background-color: lightgray;\n    }\n\n    @media (max-width: 500px) {\n      margin: 15px;\n      width: 72px;\n      height: 72px;\n      border: 5px solid lightgray;\n      h1 {\n        line-height: 72px;\n        font-size: 2em;\n      }\n    }\n  }\n`;\n\nclass GameOverlayLearn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      teacher: false\n    };\n  }\n\n  // startTeacher = () => {\n  //     this.setState({teacher: !this.state.teacher});\n  // }\n\n  render() {\n    const step = this.props.step;\n\n    const Distances = Object.keys(this.props.allDistances[step]).map(nodeId => {\n      let distance = this.props.allDistances[step][nodeId];\n      if (this.props.allDistances[step][nodeId] === null) {\n        distance = \"∞\";\n      }\n      return (\n        <DistanceItem>\n          <div className=\"block\">\n            <h1>{nodeId}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{distance}</h1>\n          </div>\n        </DistanceItem>\n      );\n    });\n\n    const PQueue = this.props.allPQ[step].map(node => {\n      return (\n        <PQItem>\n          <div className=\"block\">\n            <h1>{node.data}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{node.priority}</h1>\n          </div>\n        </PQItem>\n      );\n    });\n\n    const ExploreOptions = this.props.exploreOptions.map(option => {\n      return (\n        <div className=\"node\">\n          <h1>{option.node}</h1>\n        </div>\n      );\n    });\n\n    return (\n      <SGameOverlayLearn>\n        <SScore>\n          <h1>{this.props.score}</h1>\n        </SScore>\n        <DistanceContainer teacher={this.state.teacher}>{Distances}</DistanceContainer>\n        <PQContainer teacher={this.state.teacher}>{PQueue}</PQContainer>\n        {/* <ExploreContainer>{ExploreOptions}</ExploreContainer> */}\n        <ExploreContainer teacher={this.state.teacher}>\n          <div className=\"node\" onClick={this.props.stepFn}>\n            <h1>Step</h1>\n          </div>\n        </ExploreContainer>\n      </SGameOverlayLearn>\n    );\n  }\n}\n\nexport default GameOverlayLearn;\n","class PriorityQueue {\n  constructor(maxSize) {\n    // Set default max size if not provided\n    if (isNaN(maxSize)) {\n      maxSize = 10;\n    }\n    this.maxSize = maxSize;\n    // Init an array that'll contain the queue values.\n    this.container = [];\n  }\n  // Helper function to display all values while developing\n  display() {\n    console.log(this.container);\n  }\n  // Checks if queue is empty\n  isEmpty() {\n    return this.container.length === 0;\n  }\n  // checks if queue is full\n  isFull() {\n    return this.container.length >= this.maxSize;\n  }\n  enqueue(data, priority) {\n    // Check if Queue is full\n    if (this.isFull()) {\n      console.log(\"Queue Overflow!\");\n      return;\n    }\n    let currElem = new this.Element(data, priority);\n    let addedFlag = false;\n    // Since we want to add elements to end, we'll just push them.\n    for (let i = 0; i < this.container.length; i++) {\n      if (currElem.priority < this.container[i].priority) {\n        this.container.splice(i, 0, currElem);\n        addedFlag = true;\n        break;\n      }\n    }\n    if (!addedFlag) {\n      this.container.push(currElem);\n    }\n  }\n  dequeue() {\n    // Check if empty\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    return this.container.shift();\n  }\n  contain(data) {\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    for (let i = 0; i < this.container.length; i++) {\n      if (data == this.container[i].data) {\n        return true;\n      }\n    }\n    return false;\n  }\n  update(data, priority) {\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    for (let i = 0; i < this.container.length; i++) {\n      if (data == this.container[i].data) {\n        this.container[i].priority = priority;\n        return;\n      }\n    }\n  }\n  peek() {\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    return this.container[this.container.length - 1];\n  }\n  clear() {\n    this.container = [];\n  }\n}\n// Create an inner class that we'll use to create new nodes in the queue\n// Each element has some data and a priority\nPriorityQueue.prototype.Element = class {\n  constructor(data, priority) {\n    this.data = data;\n    this.priority = priority;\n  }\n};\n\nexport { PriorityQueue };\n","import { PriorityQueue } from \"./PriorityQueue.js\";\n\nconst createAdjListGraph = graphObj => {\n  console.log(graphObj);\n  let adjList = {};\n  graphObj.nodes.forEach(node => {\n    adjList[node.id] = [];\n  });\n  console.log(adjList);\n  graphObj.edges.forEach(edge => {\n    console.log(edge);\n    adjList[edge.from].push({ node: edge.to, weight: edge.label });\n    adjList[edge.to].push({ node: edge.from, weight: edge.label });\n  });\n  return adjList;\n};\n\nconst dijkstrasAlgorithm = (graph, startNode) => {\n  let adjList = createAdjListGraph(graph);\n  let distances = {};\n  // console.log(adjList);\n\n  // Stores the reference to previous nodes\n  let prev = {};\n  let pq = new PriorityQueue(adjList.length * adjList.length);\n\n  // Set distances to all nodes to be infinite except startNode\n  distances[startNode] = 0;\n  pq.enqueue(startNode, 0);\n  Object.keys(adjList).forEach(node => {\n    if (node != startNode) {\n      distances[node] = Infinity;\n    }\n    prev[node] = null;\n  });\n\n  let allDistances = [];\n  let allPQ = [];\n  let allPrev = [];\n\n  while (!pq.isEmpty()) {\n    allDistances.push(JSON.parse(JSON.stringify(distances)));\n    allPQ.push(JSON.parse(JSON.stringify(pq.container)));\n    allPrev.push(JSON.parse(JSON.stringify(prev)));\n    let minNode = pq.dequeue();\n    let currNode = minNode.data;\n    let weight = minNode.priority;\n    console.log(adjList[currNode]);\n    console.log(currNode);\n    console.log(minNode);\n    adjList[currNode].forEach(neighbor => {\n      let alt = distances[currNode] + neighbor.weight;\n      if (alt < distances[neighbor.node]) {\n        distances[neighbor.node] = alt;\n        prev[neighbor.node] = currNode;\n        if (!pq.contain(neighbor.node)) {\n          pq.enqueue(neighbor.node, distances[neighbor.node]);\n        } else {\n          pq.update(neighbor.node, alt);\n        }\n        allDistances.push(JSON.parse(JSON.stringify(distances)));\n        allPQ.push(JSON.parse(JSON.stringify(pq.container)));\n        allPrev.push(JSON.parse(JSON.stringify(prev)));\n      }\n    });\n  }\n  let data = {\n    allDistances: allDistances,\n    allPQ: allPQ,\n    allPrev: allPrev,\n    finalDistances: distances\n  };\n  return data;\n};\n\nexport default dijkstrasAlgorithm;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Graph from \"vis-react\";\nimport graphOptions from \"../utils/graphOptions\";\nimport generateGraph_Single from \"../utils/generateGraph_Single\";\n// import defaultIntroGraph from \"../utils/defaultIntroGraph\";\nimport GameOverlayIntro from \"../components/GameOverlayIntro\";\nimport dijkstra from \"../utils/dijkstras\";\n\nconst colors = {\n  localNode: \"#185fab\",\n  localVisited: \"#66c9ed\",\n  normal: \"#c3cdde\",\n  highlighted: \"#36EEE2\"\n};\n\nlet size = 2;\nlet vel = 5;\n\nclass Intro extends Component {\n  constructor(props) {\n    super(props);\n    size = size + vel;\n    vel = vel + 5;\n    let generatedGraph = generateGraph_Single(size);\n    let dijkstras = dijkstra(generatedGraph, \"A\");\n    this.state = {\n      visitedNodes: [],\n      visitedEdges: [],\n      network: null,\n      currentNode: \"A\",\n      endNode: \"FIN\",\n      score: 0,\n      shortestPaths: {},\n      distances: dijkstras.finalDistances,\n      graph: generatedGraph,\n      allDistances: dijkstras.allDistances,\n      allPQ: dijkstras.allPQ,\n      step: 0,\n      currentWeight: 0,\n      exploreOptions: [\n        { node: \"A\", weight: 3 },\n        { node: \"B\", weight: 2 },\n        { node: \"C\", weight: 4 }\n      ]\n    };\n    // this.baseState = this.state;\n    // console.log(this.baseState);\n  }\n\n  // resetForm = () => {\n  //   console.log(\"resetForm Reached\");\n  //   console.log(this.baseState);\n  //   console.log(this.state);\n  //   this.setState(this.baseState)\n  //   setTimeout(() => this.getAdjNodes(), 10000);\n  //   console.log(\"resetForm Finished\");\n  // }\n\n  componentDidMount = () => {\n    setTimeout(() => {\n      this.renderGraph();\n    }, 100);\n  };\n\n  componentDidUpdate = () => {\n    // Handles Click in Graph\n    // Need both to handle client syncing\n    this.handleClick({ nodes: Object });\n    this.state.network.on(\"click\", obj => {\n      this.handleClick(obj);\n    });\n  };\n\n  step = () => {\n    if (this.state.step < this.state.allPQ.length - 1) {\n      this.setState({ step: this.state.step + 1 }, () => this.renderGraph());\n    }\n  };\n\n  handleClick = obj => {\n    // destructure\n    const net = this.state.network;\n    if (net == null) return;\n\n    // get rid of annoying built in select\n    net.unselectAll();\n    // skip if no nodes selected\n    if (Object.entries(obj.nodes).length === 0) return;\n    // skip if selected node is same as current node\n    if (obj.nodes[0] === this.state.currentNode) return;\n    // skip if not adjaent node\n    let availableNodes = net.getConnectedNodes(this.state.currentNode);\n    if (!availableNodes.includes(obj.nodes[0])  ) return;\n\n    // Make Move\n    this.move(obj.nodes[0]);\n  };\n\n  move = nextNodeId => {\n    // State setup\n    const net = this.state.network;\n    let newState = this.state;\n    // console.log(nextNodeId);\n    // if (nextNodeId == String.fromCharCode(65 + size)){\n    //   console.log(\"reaching resetForm\");\n    //   this.resetForm();\n    // }\n\n    //Add edge traversed to score\n    const edges = net.getConnectedEdges(nextNodeId);\n    let traversedEdgeId;\n    let edgeWeight;\n    edges.forEach(edgeId => {\n      const edge = this.state.network.body.edges[edgeId];\n      const node1 = edge.fromId;\n      const node2 = edge.toId;\n\n      if (\n        (node1 === this.state.currentNode && node2 === nextNodeId) ||\n        (node2 === this.state.currentNode && node1 === nextNodeId)\n      ) {\n        traversedEdgeId = edge.fromId + \"-\" + edge.toId;\n        edgeWeight = edge.options.label;\n        newState.score += edgeWeight;\n      }\n    });\n\n    // add to visited nodes and edges\n    let index = this.state.visitedNodes.indexOf(this.state.currentNode);\n    if (index === -1) newState.visitedNodes.push(newState.currentNode);\n    index = this.state.visitedEdges.indexOf(traversedEdgeId);\n    if (index === -1) newState.visitedEdges.push(traversedEdgeId);\n\n    // Update local state\n    newState.currentNode = nextNodeId;\n    this.setState(newState, () => this.renderGraph());\n  };\n\n  renderGraph = () => {\n    this.clearSelection();\n\n    // Highlight local player visited nodes and edges\n    if (this.state.visitedNodes.length !== 0)\n      this.selectNodesFromList(this.state.visitedNodes, colors.localVisited);\n    if (this.state.visitedEdges.length !== 0)\n      this.selectEdgesFromList(this.state.visitedEdges, colors.localVisited);\n\n    // Highlight local player node and edges\n    this.selectNode(this.state.currentNode, colors.localNode);\n    this.selectEdges(this.state.currentNode, colors.localNode);\n\n    this.state.allPQ[this.state.step].forEach(node => {\n      this.selectNode(node.data, colors.highlighted);\n    });\n    // this.selectNode(\n    //   this.state.allPQ[this.state.step][0].data,\n    //   colors.highlighted\n    // );\n\n    this.forceUpdate();\n  };\n\n  clearSelection = () => {\n    const nodes = this.state.network.body.nodes;\n    Object.keys(nodes).forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.size = 25;\n      node.options.color.background = colors.normal;\n    });\n\n    let edges = this.state.network.body.edges;\n    Object.keys(edges).forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = colors.normal;\n      edge.options.width = 5;\n    });\n  };\n\n  // nodeId: str, color: str\n  selectNode = (nodeId, color) => {\n    let node = this.state.network.body.nodes[nodeId];\n    node.options.color.background = color;\n    node.options.size = 20;\n  };\n\n  /**\n   * nodeId str, color: str\n   * Color edges around given node\n   */\n  selectEdges = (nodeId, color) => {\n    let edges = this.state.network.getConnectedEdges(nodeId);\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getAdjNodes = () => {\n    if (this.network == null) {\n      setTimeout(() => this.getAdjNodes(), 100);\n      return;\n    }\n    let edges = this.state.network.getConnectedEdges(this.state.currentNode);\n    let adjNodes = [];\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      adjNodes.push(edge.toId);\n    });\n    console.log(adjNodes);\n    return adjNodes;\n  };\n\n  selectNodesFromList = (nodes, color) => {\n    nodes.forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.color.background = color;\n      node.options.size = 20;\n    });\n  };\n\n  selectEdgesFromList = (edges, color) => {\n    edges.forEach(edgeId => {\n      let edge = null;\n      Object.values(this.state.network.body.edges).forEach(e => {\n        if (e.fromId + \"-\" + e.toId === edgeId) edge = e;\n      });\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getNetwork = data => {\n    this.setState({ network: data });\n  };\n  getEdges = data => {\n    // console.log(data);\n  };\n  getNodes = data => {\n    // console.log(data);\n  };\n\n  render() {\n    return (\n      // <SMainMenu>\n      <React.Fragment>\n        <Graph\n          style={{ width: \"100%\", height: \"100%\", margin: \"0px\" }}\n          graph={this.state.graph}\n          options={graphOptions}\n          getNetwork={this.getNetwork}\n          getEdges={this.getEdges}\n          getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n        <GameOverlayIntro\n          score={this.state.score}\n          allDistances={this.state.allDistances}\n          allPQ={this.state.allPQ}\n          step={this.state.step}\n          stepFn={this.step}\n          exploreOptions={this.state.exploreOptions}\n        />\n\n      </React.Fragment>\n\n      // <SMainMenu>\n\n        // <SButton onClick={() => this.props.history.push(\"/intro\")}>\n        //   <div>\n        //     <p>Introduction</p>\n        //   </div>\n        // </SButton>\n\n\n      // </SMainMenu>\n\n\n    );\n  }\n}\n\nexport default withRouter(Intro);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst SGameOverlayLearn = styled.div`\n  user-select: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n`;\n\nconst HeadText = styled.h1`\n  display: ${props => (props.active ? \"block\" : \"none\")};\n  position: absolute;\n  font-size: 28px;\n  color: white;\n\n  @media (max-width: 500px) {\n    font-size: 1em;\n  }\n`;\n\nconst SScore = styled.div`\n  margin-top: 15px;\n  padding: 25px;\n  display: inline-block;\n  background-color: #6a758faa;\n  border-radius: 15px;\n  color: white;\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1em;\n    }\n  }\n`;\n\nconst DistanceContainer = styled.div`\n  display: ${props => (props.active ? \"block\" : \"none\")};\n  overflow: auto;\n  position: absolute;\n  max-height: calc(100vh - 70px);\n  top: 56px;\n  left: 20px;\n  border-radius: 5px;\n`;\n\nconst PQContainer = styled.div`\n  display: ${props => (props.active ? \"block\" : \"none\")};\n  overflow: auto;\n  position: absolute;\n  max-height: calc(100vh - 70px);\n  top: 56px;\n  right: 20px;\n  border-radius: 5px;\n`;\n\nconst DistanceItem = styled.div`\n  .block {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: rgb(225, 225, 225);\n    border: 1px solid black;\n    h1 {\n      line-height: 64px;\n      margin: auto;\n      vertical-align: center;\n    }\n\n    @media (max-width: 500px) {\n      width: 32px;\n      height: 32px;\n      h1 {\n        font-size: 1.2em;\n        line-height: 32px;\n      }\n    }\n  }\n`;\n\nconst ExploreContainer = styled.div`\n  position: absolute;\n  top: 75vh;\n  left: 50%;\n  transform: translate(-50%);\n  display: flex;\n`;\n\nconst Node = styled.div`\n  display: ${props => (props.active ? \"block\" : \"none\")};\n  width: 100px;\n  height: 100px;\n  margin: 25px;\n  border-radius: 25px;\n  background-color: rgba(200, 200, 200, 0.5);\n  border: 3px solid darkgray;\n  h1 {\n    line-height: 100px;\n    font-size: 1.5em;\n    color: white;\n  }\n  :hover {\n    cursor: pointer;\n    background-color: rgba(175, 175, 250, 0.9);\n  }\n\n  @media (max-width: 500px) {\n    margin: 5px;\n    width: 72px;\n    height: 72px;\n    border: 5px solid lightgray;\n    h1 {\n      line-height: 72px;\n      font-size: 1em;\n    }\n  }\n`;\n\nclass GameOverlayLearn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      teacher: false,\n      text: \"Helper\"\n    };\n  }\n\n  startTeacher = () => {\n    this.setState({ teacher: !this.state.teacher });\n    if (this.state.text == \"Helper\") {\n      this.state.text = \"Hide\";\n    } else {\n      this.state.text = \"Helper\";\n    }\n  };\n\n  showW = () => {\n    if (this.props.teacher) {\n      return <h1>Hide</h1>;\n    } else {\n      return <h1>TeachMe</h1>;\n    }\n  };\n\n  render() {\n    const step = this.props.step;\n\n    const Distances = Object.keys(this.props.allDistances[step]).map(nodeId => {\n      let distance = this.props.allDistances[step][nodeId];\n      if (this.props.allDistances[step][nodeId] === null) {\n        distance = \"∞\";\n      }\n      return (\n        <DistanceItem>\n          <div className=\"block\">\n            <h1>{nodeId}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{distance}</h1>\n          </div>\n        </DistanceItem>\n      );\n    });\n\n    const PQueue = this.props.allPQ[step].map(node => {\n      return (\n        <DistanceItem>\n          <div className=\"block\">\n            <h1>{node.data}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{node.priority}</h1>\n          </div>\n        </DistanceItem>\n      );\n    });\n\n    const ExploreOptions = this.props.exploreOptions.map(option => {\n      return (\n        <div className=\"node\">\n          <h1>{option.node}</h1>\n        </div>\n      );\n    });\n\n    let isComplete = this.props.isLevelComplete();\n\n    return (\n      <SGameOverlayLearn>\n        <SScore>\n          <h1>\n            Level: {this.props.level} <br /> Score: {this.props.score}\n          </h1>\n        </SScore>\n        <HeadText\n          style={{\n            top: \"10px\",\n            left: \"23px\"\n          }}\n          active={this.state.teacher}\n        >\n          Distances\n        </HeadText>\n        <DistanceContainer active={this.state.teacher}>\n          {Distances}\n        </DistanceContainer>\n        <HeadText\n          style={{\n            top: \"10px\",\n            right: \"40px\"\n          }}\n          active={this.state.teacher}\n        >\n          Queue\n        </HeadText>\n        <PQContainer active={this.state.teacher}>{PQueue}</PQContainer>\n        <ExploreContainer active={this.state.teacher}>\n          <Node onClick={this.props.stepFn} active={true}>\n            <a\n              href=\"https://www.youtube.com/watch?v=CL1byLngb5Q\"\n              target=\"_blank\"\n            >\n              <h1>Tutorial</h1>\n            </a>\n          </Node>\n          <Node onClick={() => this.startTeacher()} active={true}>\n            <h1>{this.state.text}</h1>\n          </Node>\n          <Node onClick={this.props.stepFn} active={this.state.teacher}>\n            <h1>Step</h1>\n          </Node>\n          <Node onClick={() => this.props.nextLevel()} active={isComplete}>\n            <h1>Next</h1>\n          </Node>\n        </ExploreContainer>\n      </SGameOverlayLearn>\n    );\n  }\n}\n\nexport default GameOverlayLearn;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Graph from \"vis-react\";\nimport graphOptions from \"../utils/graphOptions\";\nimport default_Graph from \"../utils/defaultGraph\";\nimport generateGraph_Single from \"../utils/generateGraph_Single\";\n\nimport GameOverlayLearn from \"../components/GameOverlayLearn\";\nimport dijkstra from \"../utils/dijkstras\";\n\nconst colors = {\n  localNode: \"#185fab\",\n  localVisited: \"#66c9ed\",\n  normal: \"#c3cdde\",\n  highlighted: \"#36EEE2\"\n};\nlet defaultGraph;\n\nclass Learn extends Component {\n  constructor(props) {\n    super(props);\n\n    defaultGraph = generateGraph_Single(props.level * 5);\n    let dijkstras = dijkstra(defaultGraph, \"A\");\n\n    this.state = {\n      visitedNodes: [],\n      visitedEdges: [],\n      network: null,\n      currentNode: \"A\",\n      endNode: \"FIN\",\n      score: 0,\n      shortestPaths: {},\n      distances: dijkstras.finalDistances,\n      allDistances: dijkstras.allDistances,\n      allPQ: dijkstras.allPQ,\n      allPrev: dijkstras.allPrev,\n      step: 0,\n      currentWeight: 0,\n      exploreOptions: [\n        { node: \"A\", weight: 3 },\n        { node: \"B\", weight: 2 },\n        { node: \"C\", weight: 4 }\n      ]\n    };\n  }\n\n  componentDidMount = () => {\n    setTimeout(() => {\n      this.renderGraph();\n    }, 50);\n  };\n\n  componentDidUpdate = () => {\n    // Handles Click in Graph\n    // Need both to handle client syncing\n    this.handleClick({ nodes: Object });\n    this.state.network.on(\"click\", obj => {\n      this.handleClick(obj);\n    });\n  };\n\n  isLevelComplete = () => {\n    return this.state.currentNode === this.state.endNode;\n  };\n\n  step = () => {\n    if (this.state.step < this.state.allPQ.length - 1) {\n      this.setState({ step: this.state.step + 1 }, () => this.renderGraph());\n    }\n  };\n\n  handleClick = obj => {\n    // destructure\n    const net = this.state.network;\n    if (net == null) return;\n\n    // get rid of annoying built in select\n    net.unselectAll();\n    // skip if no nodes selected\n    if (Object.entries(obj.nodes).length === 0) return;\n    // skip if selected node is same as current node\n    if (obj.nodes[0] === this.state.currentNode) return;\n    // skip if not adjaent node\n    let availableNodes = net.getConnectedNodes(this.state.currentNode);\n    if (!availableNodes.includes(obj.nodes[0])) return;\n\n    // Make Move\n    this.move(obj.nodes[0]);\n  };\n\n  move = nextNodeId => {\n    // State setup\n    const net = this.state.network;\n    let newState = this.state;\n\n    //Add edge traversed to score\n    const edges = net.getConnectedEdges(nextNodeId);\n    let traversedEdgeId;\n    let edgeWeight;\n    edges.forEach(edgeId => {\n      const edge = this.state.network.body.edges[edgeId];\n      const node1 = edge.fromId;\n      const node2 = edge.toId;\n\n      if (\n        (node1 === this.state.currentNode && node2 === nextNodeId) ||\n        (node2 === this.state.currentNode && node1 === nextNodeId)\n      ) {\n        traversedEdgeId = edge.fromId + \"-\" + edge.toId;\n        edgeWeight = edge.options.label;\n        newState.score += edgeWeight;\n      }\n    });\n\n    // add to visited nodes and edges\n    let index = this.state.visitedNodes.indexOf(this.state.currentNode);\n    if (index === -1) newState.visitedNodes.push(newState.currentNode);\n    index = this.state.visitedEdges.indexOf(traversedEdgeId);\n    if (index === -1) newState.visitedEdges.push(traversedEdgeId);\n\n    // Update local state\n    newState.currentNode = nextNodeId;\n    this.setState(newState, () => this.renderGraph());\n  };\n\n  renderGraph = () => {\n    this.clearSelection();\n\n    // Highlight local player visited nodes and edges\n    if (this.state.visitedNodes.length !== 0)\n      this.selectNodesFromList(this.state.visitedNodes, colors.localVisited);\n    if (this.state.visitedEdges.length !== 0)\n      this.selectEdgesFromList(this.state.visitedEdges, colors.localVisited);\n\n    // Highlight local player node and edges\n\n    this.state.allPQ[this.state.step].forEach(node => {\n      this.selectNode(node.data, colors.highlighted);\n      this.selectEdgeFromList(\n        this.state.allPrev[this.state.step],\n        colors.highlighted\n      );\n    });\n\n    this.selectNode(this.state.currentNode, colors.localNode);\n    this.selectEdges(this.state.currentNode, colors.localNode);\n\n    //this.selectEdgeFromList(this.state.allPrev[this.state.step2], colors.localVisited);\n\n    // this.selectNode(\n    //   this.state.allPQ[this.state.step][0].data,\n    //   colors.highlighted\n    // );\n\n    this.forceUpdate();\n  };\n\n  clearSelection = () => {\n    const nodes = this.state.network.body.nodes;\n    Object.keys(nodes).forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.size = 25;\n      node.options.color.background = colors.normal;\n    });\n\n    let edges = this.state.network.body.edges;\n    Object.keys(edges).forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = colors.normal;\n      edge.options.width = 5;\n    });\n  };\n\n  // nodeId: str, color: str\n  selectNode = (nodeId, color) => {\n    let node = this.state.network.body.nodes[nodeId];\n    node.options.color.background = color;\n    node.options.size = 20;\n  };\n\n  /**\n   * nodeId str, color: str\n   * Color edges around given node\n   */\n  selectEdges = (nodeId, color) => {\n    let edges = this.state.network.getConnectedEdges(nodeId);\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getAdjNodes = () => {\n    if (this.network == null) {\n      setTimeout(() => this.getAdjNodes(), 100);\n      return;\n    }\n    let edges = this.state.network.getConnectedEdges(this.state.currentNode);\n    let adjNodes = [];\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      adjNodes.push(edge.toId);\n    });\n    console.log(adjNodes);\n    return adjNodes;\n  };\n\n  selectNodesFromList = (nodes, color) => {\n    nodes.forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.color.background = color;\n      node.options.size = 20;\n    });\n  };\n\n  selectEdgesFromList = (edges, color) => {\n    edges.forEach(edgeId => {\n      let edge = null;\n      Object.values(this.state.network.body.edges).forEach(e => {\n        if (e.fromId + \"-\" + e.toId === edgeId) edge = e;\n      });\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  selectEdgeFromList = (edge, color) => {\n    let keys = Object.keys(edge);\n    let values = Object.values(edge);\n    for (let i = 0; i < keys.length; i++) {\n      let edgeA = null;\n      if (values[i] !== null) {\n        let edgeB = values[i] + \"-\" + keys[i];\n        console.log(edgeB);\n        Object.values(this.state.network.body.edges).forEach(e => {\n          if (\n            e.fromId + \"-\" + e.toId === edgeB ||\n            e.toId + \"-\" + e.fromId === edgeB\n          ) {\n            e.options.color.color = color;\n            e.options.width = 10;\n          }\n        });\n      }\n    }\n  };\n\n  getNetwork = data => {\n    this.setState({ network: data });\n  };\n  getEdges = data => {\n    // console.log(data);\n  };\n  getNodes = data => {\n    // console.log(data);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Graph\n          style={{ width: \"100%\", height: \"100%\", margin: \"0px\" }}\n          graph={defaultGraph}\n          options={graphOptions}\n          getNetwork={this.getNetwork}\n          getEdges={this.getEdges}\n          getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n        <GameOverlayLearn\n          score={this.state.score}\n          allDistances={this.state.allDistances}\n          allPQ={this.state.allPQ}\n          step={this.state.step}\n          stepFn={this.step}\n          exploreOptions={this.state.exploreOptions}\n          level={this.props.level}\n          nextLevel={this.props.nextLevel}\n          isLevelComplete={this.isLevelComplete}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Learn);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst ProgressBar = require(\"progressbar.js\");\n\nconst SGameOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n`;\n\nconst SMoveProgress = styled.div`\n  display: ${props => (props.moving ? \"block\" : \"none\")};\n  position: absolute;\n  top: 65vh;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 150px;\n  height: 150px;\n\n  @media (max-width: 500px) {\n    width: 75px;\n    height: 75px;\n    top: 60vh;\n  }\n`;\n\nconst SScore = styled.div`\n  margin-top: 15px;\n  padding: 25px;\n  display: inline-block;\n  background-color: #6a758faa;\n  border-radius: 15px;\n  color: white;\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1em;\n    }\n  }\n`;\n\nclass GameOverlay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progressBar: null\n    };\n  }\n\n  componentWillReceiveProps = newProps => {\n    if (newProps.moving && newProps.moving !== this.props.moving) {\n      let progress = new ProgressBar.Circle(\"#moveProgress\", {\n        strokeWidth: 15,\n        easing: \"easeOut\",\n        color: \"#FFEA82\",\n        text: {\n          value: \"Moving\"\n        },\n        fill: \"rgba(0, 0, 0, 0.8)\"\n      });\n\n      progress.animate(\n        1,\n        {\n          duration: newProps.currentWeight * 400\n        },\n        () => {\n          progress.destroy();\n        }\n      );\n    }\n  };\n\n  componentDidMount = () => {};\n\n  render() {\n    const adjNodes = this.props.getAdjNodes();\n    let {\n      playerName,\n      playerScore,\n      opponentName,\n      opponentScore\n    } = this.props.data;\n\n    return (\n      <SGameOverlay>\n        <SScore>\n          <h1>\n            {playerScore +\n              \"  \" +\n              playerName +\n              \" | \" +\n              opponentName +\n              \"  \" +\n              opponentScore}\n          </h1>\n        </SScore>\n        <SMoveProgress id=\"moveProgress\" moving={this.props.moving} />\n      </SGameOverlay>\n    );\n  }\n}\n\nexport default GameOverlay;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Graph from \"vis-react\";\nimport Lobby from \"./Lobby\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport graphOptions from \"../utils/graphOptions\";\nimport defaultGraph from \"../utils/defaultGraph\";\n// import dijkstras from \"../utils/dijkstras\";\nimport io from \"socket.io-client\";\n\n// const socketUrl = \"https://localhost:\" + process.env.PORT || 4000;\nconst socketUrl = \"https://dijkstras-arena.herokuapp.com/\";\n\nconst colors = {\n  localNode: \"#185fab\",\n  localVisited: \"#66c9ed\",\n  remoteNode: \"#cf4121\",\n  remoteVisited: \"#ff8870\",\n  normal: \"#c3cdde\",\n  finalNode: \"green\"\n};\n\nvar events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n  }\n};\n\nclass GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: \"\",\n      gameId: \"\",\n      playerId: null,\n      playerName: null,\n      opponentId: null,\n      gameState: null,\n      gameGraph: null,\n      network: null,\n      currentNode: 1,\n      startNode: 1,\n      endNode: 15,\n      score: 0,\n      distances: {},\n      moving: false,\n      currentWeight: 0\n    };\n  }\n\n  enterQueue = playerName => {\n    this.setState(\n      {\n        socket: io(socketUrl, {\n          query: {\n            name: playerName\n          }\n        })\n      },\n      () => {\n        this.activateSockets(playerName);\n      }\n    );\n  };\n\n  // code runs right as graph loads\n  activateSockets = playerName => {\n    this.state.socket.emit(\"setName\", playerName);\n\n    this.state.socket.on(\"startGame\", game => {\n      let gameState = game.gameState;\n      // Set opponentId\n      let opponentId = \"\";\n      let opponentName = \"\";\n      Object.keys(gameState.players).forEach(player => {\n        if (player !== this.state.socket.id) {\n          opponentId = player;\n          opponentName = gameState.players[player].name;\n        }\n      });\n\n      this.setState({\n        playerName: playerName,\n        opponentName: opponentName,\n        gameId: game.id,\n        gameState: gameState,\n        gameGraph: game.gameGraph,\n        startNode: gameState.players[this.state.socket.id].currentNode,\n        currentNode: gameState.players[this.state.socket.id].currentNode,\n        playerId: this.state.socket.id,\n        opponentId: opponentId\n      });\n      setTimeout(() => this.renderGraph(gameState), 10);\n    });\n\n    this.state.socket.on(\"getStateServerEmit\", data => {\n      let gameState = data.gameState;\n      this.setState({\n        gameState: gameState,\n        currentNode: gameState.players[this.state.socket.id].currentNode\n      });\n      setTimeout(() => this.renderGraph(gameState), 10);\n    });\n\n    this.state.socket.on(\"endGame\", data => {\n      console.log(data);\n      this.endGame(data.winner, data.winnerScore, data.loserScore);\n    });\n  };\n\n  componentWillUnmount = () => {\n    if (this.state.socket) {\n      this.state.socket.disconnect();\n      this.addToMatchHistory(\n        \"Abandoned ship vs \" + this.state.opponentName || \"Anonymous\"\n      );\n    }\n  };\n\n  componentDidUpdate = () => {\n    const net = this.state.network;\n    if (net == null) return;\n\n    // Handles Click in Graph\n    // Need both to handle client syncing\n    this.handleClick({ nodes: Object });\n    this.state.network.on(\"click\", obj => {\n      this.handleClick(obj);\n    });\n  };\n\n  handleClick = obj => {\n    // destructure\n    const net = this.state.network;\n    if (net == null) return;\n\n    // get rid of annoying built in select\n    net.unselectAll();\n    // skip if currently moving\n    if (this.state.moving) return;\n    // skip if no nodes selected\n    if (Object.entries(obj.nodes).length === 0) return;\n    // skip if selected node is same as current node\n    if (obj.nodes[0] === this.state.currentNode) return;\n    // skip if not adjaent node\n    let availableNodes = net.getConnectedNodes(this.state.currentNode);\n    if (!availableNodes.includes(obj.nodes[0])) return;\n\n    // Make Move\n    this.move(obj.nodes[0]);\n  };\n\n  move = nextNodeId => {\n    // State setup\n    const net = this.state.network;\n    let newState = this.state;\n\n    //Add edge traversed to score\n    const edges = net.getConnectedEdges(nextNodeId);\n    let traversedEdgeId;\n    let edgeWeight;\n    edges.forEach(edgeId => {\n      const edge = this.state.network.body.edges[edgeId];\n      const node1 = edge.fromId;\n      const node2 = edge.toId;\n\n      if (\n        (node1 === this.state.currentNode && node2 === nextNodeId) ||\n        (node2 === this.state.currentNode && node1 === nextNodeId)\n      ) {\n        traversedEdgeId = edge.fromId + \"-\" + edge.toId;\n        edgeWeight = edge.options.label;\n      }\n    });\n    // Send state to server\n    this.sendPlayerMove(nextNodeId, traversedEdgeId, edgeWeight);\n\n    // wait\n    newState.moving = true;\n    newState.currentWeight = edgeWeight;\n    setTimeout(() => this.setState({ moving: false }), edgeWeight * 400);\n\n    // Update local state\n    newState.currentNode = nextNodeId;\n    this.setState(newState);\n  };\n\n  // send player move to server\n  sendPlayerMove = (nextNode, edge, edgeWeight) => {\n    this.state.socket.emit(\"playerMoveClientEmit\", {\n      gameId: this.state.gameId,\n      currentNode: this.state.currentNode,\n      score: (this.state.score += edgeWeight),\n      nextNode: nextNode,\n      edge: edge\n    });\n  };\n\n  endGame = (winner, winnerScore, loserScore) => {\n    if (!winner) {\n      this.props.history.push(\"/\");\n      return;\n    }\n    if (this.state.playerId === winner) {\n      alert(\n        \"you win! Your Score: \" +\n          winnerScore +\n          \".  Opponent's Score: \" +\n          loserScore\n      );\n    } else {\n      alert(\n        \"you lose! Your Score: \" +\n          loserScore +\n          \".  Opponent's Score: \" +\n          winnerScore\n      );\n    }\n    setTimeout(() => this.props.history.push(\"/\"), 3000);\n  };\n\n  addToMatchHistory = result => {\n    let matches = JSON.parse(localStorage.getItem(\"matchHistory\"));\n    matches.push(result);\n    localStorage.setItem(\"matchHistory\", JSON.stringify(matches));\n  };\n\n  dijkstras = (vertices, edges, u, v) => {};\n\n  renderGraph = () => {\n    this.clearSelection();\n\n    const players = this.state.gameState.players;\n    const player = players[this.state.playerId];\n    const opponent = players[this.state.opponentId];\n\n    // Highlight opponent visited nodes and edges\n    if (opponent.visitedNodes.length !== 0)\n      this.selectNodesFromList(opponent.visitedNodes, colors.remoteVisited);\n    if (opponent.visitedEdges.length !== 0)\n      this.selectEdgesFromList(opponent.visitedEdges, colors.remoteVisited);\n\n    // Highlight local player visited nodes and edges\n    if (player.visitedNodes.length !== 0)\n      this.selectNodesFromList(player.visitedNodes, colors.localVisited);\n    if (player.visitedEdges.length !== 0)\n      this.selectEdgesFromList(player.visitedEdges, colors.localVisited);\n\n    // Highlights opponent node and edges\n    this.selectNode(opponent.currentNode, colors.remoteNode);\n    this.selectEdges(opponent.currentNode, colors.remoteNode);\n    // Highlight local player node and edges\n    this.selectNode(player.currentNode, colors.localNode);\n    this.selectEdges(player.currentNode, colors.localNode);\n\n    // Highlight final node\n    let finalNodeId = Math.pow(\n      (this.state.gameGraph.nodes.length - 1) / 2 + 1,\n      2\n    );\n    this.selectNode(finalNodeId, colors.finalNode);\n\n    this.forceUpdate();\n  };\n\n  clearSelection = () => {\n    const nodes = this.state.network.body.nodes;\n    Object.keys(nodes).forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.size = 25;\n      node.options.color.background = colors.normal;\n    });\n\n    let edges = this.state.network.body.edges;\n    Object.keys(edges).forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = colors.normal;\n      edge.options.width = 5;\n    });\n  };\n\n  // nodeId: str, color: str\n  selectNode = (nodeId, color) => {\n    let node = this.state.network.body.nodes[nodeId];\n    node.options.color.background = color;\n    node.options.size = 20;\n    return node;\n  };\n\n  /**\n   * nodeId str, color: str\n   * Color edges around given node\n   */\n  selectEdges = (nodeId, color) => {\n    let edges = this.state.network.getConnectedEdges(nodeId);\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getAdjNodes = () => {\n    if (this.network == null) {\n      setTimeout(() => this.getAdjNodes(), 100);\n      return;\n    }\n    let edges = this.state.network.getConnectedEdges(this.state.currentNode);\n    let adjNodes = [];\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      adjNodes.push(edge.toId);\n    });\n    return adjNodes;\n  };\n\n  selectNodesFromList = (nodes, color) => {\n    nodes.forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.color.background = color;\n      node.options.size = 20;\n    });\n  };\n\n  selectEdgesFromList = (edges, color) => {\n    edges.forEach(edgeId => {\n      let edge = null;\n      Object.values(this.state.network.body.edges).forEach(e => {\n        if (e.fromId + \"-\" + e.toId === edgeId) edge = e;\n      });\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getNetwork = data => {\n    this.setState({ network: data });\n  };\n  getEdges = data => {\n    // console.log(data);\n  };\n  getNodes = data => {\n    // console.log(data);\n  };\n\n  render() {\n    // Makes sure client has received gamestate and also has setstate into state\n    if (this.state.playerId == null)\n      return <Lobby enterQueue={this.enterQueue} />;\n    return (\n      <React.Fragment>\n        <Graph\n          style={{ width: \"100%\", height: \"100%\", margin: \"0px\" }}\n          graph={this.state.gameGraph}\n          options={graphOptions}\n          events={events}\n          getNetwork={this.getNetwork}\n          getEdges={this.getEdges}\n          getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n        <GameOverlay\n          getAdjNodes={this.getAdjNodes}\n          moving={this.state.moving}\n          currentWeight={this.state.currentWeight}\n          data={{\n            playerName: this.state.playerName,\n            opponentName: this.state.opponentName,\n            playerScore: this.state.gameState.players[this.state.playerId][\n              \"score\"\n            ],\n            opponentScore: this.state.gameState.players[this.state.opponentId][\n              \"score\"\n            ]\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(GameContainer);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport MainMenu from \"./screens/MainMenu\";\nimport Lobby from \"./screens/Lobby\";\nimport Intro from \"./screens/Intro\";\nimport Learn from \"./screens/Learn\";\nimport GameContainer from \"./screens/GameContainer.jsx\";\n\nconst socket = null;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      level: 1\n    };\n  }\n\n  nextLevel = () => {\n    this.setState({ level: (this.state.level += 1) });\n    console.log(\"yes\");\n  };\n\n  componentDidMount = () => {\n    if (!localStorage.getItem(\"matchHistory\"))\n      localStorage.setItem(\"matchHistory\", JSON.stringify([]));\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/\"}\n              component={MainMenu}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/intro\"}\n              component={Intro}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/learn\"}\n              component={() => (\n                <Learn level={this.state.level} nextLevel={this.nextLevel} />\n              )}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/lobby\"}\n              component={() => <Lobby />}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/game\"}\n              component={() => <GameContainer socket={socket} />}\n            />\n            <Redirect\n              from={process.env.PUBLIC_URL + \"/*\"}\n              to={process.env.PUBLIC_URL + \"/\"}\n            />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","const generateGraph_Single = size => {\n  let graph = {\n    nodes: [],\n    edges: []\n  };\n\n  let font = { vadjust: -40 };\n\n  for (let i = 0; i < size; i++) {\n    // graph.nodes.push({\n    //   id: i,\n    //   label: String.fromCharCode(96 + i),\n    //   font: font\n    // });\n    graph.nodes.push({\n      id: String.fromCharCode(65 + i),\n      label: String.fromCharCode(65 + i),\n      font: font\n    });\n\n    if (i >= 1) {\n      let weight = Math.floor(Math.random() * 10) + 1;\n      graph.edges.push({\n        from: String.fromCharCode(65 + i - 1),\n        to: String.fromCharCode(65 + i),\n        label: weight\n      });\n\n      // graph.edges.push({\n      //   from: i - 1,\n      //   to: i + size,\n      //   label: weight\n      // });\n    }\n    // if (i >= 2) {\n    //   if (Math.random() < 0.5) {\n    //     let weight = Math.floor(Math.random() * 10) + 1;\n    //     graph.edges.push({\n    //       from: String.fromCharCode(65 + i - 2),\n    //       to: String.fromCharCode(65 + i),\n    //       label: weight\n    //     });\n    //     // graph.edges.push({\n    //     //   from: i - 2 + size,\n    //     //   to: i + size,\n    //     //   label: weight\n    //     // });\n    //   }\n    //\n    //   // cross edges between two player's graphs\n    //   // if (Math.random() < 0.35) {\n    //   //   weight = Math.floor(Math.random() * 2) + 1;\n    //   //   graph.edges.push({\n    //   //     from: i,\n    //   //     to: i + size,\n    //   //     label: weight\n    //   //   });\n    //   // }\n    // }\n\n    // if (i >= 3 && Math.random() < 0.5) {\n    //   let weight = Math.floor(Math.random() * 10) + 1;\n    //   graph.edges.push({\n    //     from: String.fromCharCode(65 + i - 3),\n    //     to: String.fromCharCode(65 + i),\n    //     label: weight\n    //   });\n\n    // graph.edges.push({\n    //   from: i - 3 + size,\n    //   to: i + size,\n    //   label: weight\n    // });\n\n    // more connections with >3 distance]\n    let weight = Math.floor(Math.random() * 10) + 1;\n    // for (let j = i; j >= 1; j--){\n    //   let dist = Math.floor(Math.random() * (j));\n    //   if (dist <= i-j && Math.pow(Math.random() * j*0.0, 2) < dist) {\n    //     graph.edges.push({\n    //       from: String.fromCharCode(65 + i-dist),\n    //       to: String.fromCharCode(65 + i),\n    //       label: weight\n    //     });\n    //   }\n    // }\n\n    for (let dist = 2; dist <= i; dist++) {\n      // if (dist > Math.pow(Math.random() * dist *size/6, 2)) {\n      // let exp = 0.515 - size/1000;\n      // let exp = 0.000002563*Math.pow(size, 2) - 0.001269*size + 0.1513;\n      // let exp = 0.000007639*Math.pow(size, 2) - 0.002792*size + 0.2528;\n      // let exp = 0.0000584*Math.pow(size, 2) - 0.001802*size + 1.268;\n      // let exp = 0.0001213892592*Math.pow(size, 2) - 0.03068064814*size + 1.280559259;\n      // let exp = 0.05;\n\n      let exp = 0;\n\n      // switch (true){\n      //   case (size < 5): exp = 2; break;\n      //   case (size < 7): exp = 0.9; break;\n      //   case (size < 10): exp = 0.6; break;\n      //   case (size < 15): exp = 0.3; break;\n      //   case (size < 20): exp = 0.15; break;\n      //   case (size < 25): exp = 0.10; break;\n      //   case (size < 30): exp = 0.08; break;\n      //   case (size < 35): exp = 0.07; break;\n      //   case (size < 40): exp = 0.06; break;\n      //   case (size < 45): exp = 0.05; break;\n      //   case (size < 50): exp = 0.04; break;\n      //   case (size < 55): exp = 0.035; break;\n      //   case (size < 60): exp = 0.03; break;\n      //   case (size < 70): exp = 0.025; break;\n      //   case (size < 80): exp = 0.02; break;\n      //   case (size < 90): exp = 0.015; break;\n      //   default: exp = 0.01;\n      // }\n\n      switch (true) {\n        case size < 5:\n          exp = 10;\n          break;\n        case size < 7:\n          exp = 3;\n          break;\n        case size < 10:\n          exp = 1;\n          break;\n        case size < 15:\n          exp = 0.5;\n          break;\n        case size < 20:\n          exp = 0.3;\n          break;\n        case size < 25:\n          exp = 0.22;\n          break;\n        case size < 30:\n          exp = 0.2;\n          break;\n        case size < 35:\n          exp = 0.17;\n          break;\n        case size < 40:\n          exp = 0.16;\n          break;\n        case size < 45:\n          exp = 0.15;\n          break;\n        case size < 50:\n          exp = 0.12;\n          break;\n        case size < 55:\n          exp = 0.1;\n          break;\n        case size < 60:\n          exp = 0.07;\n          break;\n        case size < 70:\n          exp = 0.065;\n          break;\n        case size < 80:\n          exp = 0.06;\n          break;\n        case size < 90:\n          exp = 0.055;\n          break;\n        default:\n          exp = 0.05;\n      }\n      // console.log(size);\n\n      // if (dist < Math.pow(Math.random() * Math.pow(size,exp) * 1, 1/exp)) {\n      if (\n        dist < size * Math.pow(Math.random() * 1, 1 / exp) &&\n        dist < size * Math.pow(Math.random() * 1, 1 / exp)\n      ) {\n        graph.edges.push({\n          from: String.fromCharCode(65 + i - dist),\n          to: String.fromCharCode(65 + i),\n          label: weight\n        });\n      }\n    }\n\n    // }\n  }\n\n  // let weight = Math.floor(Math.random() * 10) + 1;\n  // graph.nodes.push({\n  //   id: String.fromCharCode(65 + size),\n  //   label: \"FIN\",\n  //   font: font\n  // });\n  // graph.edges.push({\n  //   from: String.fromCharCode(65 + size - 1),\n  //   to: String.fromCharCode(65 + size),\n  //   label: weight\n  // });\n\n  let weight = Math.floor(Math.random() * 10) + 1;\n  graph.nodes.push({\n    id: \"FIN\",\n    label: \"FIN\",\n    font: font\n  });\n  graph.edges.push({\n    from: String.fromCharCode(65 + size - 1),\n    to: \"FIN\",\n    label: weight\n  });\n\n  // graph.edges.push({\n  //   from: size - 1 + size,\n  //   to: size * size,\n  //   label: weight\n  // });\n\n  // console.log(size * size);\n  return graph;\n};\n\nmodule.exports = generateGraph_Single;\n"],"sourceRoot":""}