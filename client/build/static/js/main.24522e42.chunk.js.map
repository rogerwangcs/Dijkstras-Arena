{"version":3,"sources":["screens/MainMenu.jsx","screens/Lobby.jsx","utils/graphOptions.js","utils/defaultGraph.js","components/GameOverlayLearn.jsx","utils/PriorityQueue.js","utils/dijkstras.js","screens/Learn.jsx","components/GameOverlay.jsx","screens/GameContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["theme","SMainMenu","styled","div","SButton","MainMenu","props","state","onClick","history","push","href","target","rel","Component","withRouter","SLobby","Lobby","onInput","e","preventDefault","setState","name","value","submitQueue","length","queued","enterQueue","substring","alert","this","Fragment","style","fontSize","onChange","placeholder","width","height","autoResize","nodes","fixed","x","y","shape","size","borderWidth","borderWidthSelected","color","border","font","align","edges","highlight","hover","opacity","strokeWidth","arrows","to","enabled","scaleFactor","type","from","interaction","dragNodes","dragView","zoomView","selectConnectedEdges","vadjust","id","label","SGameOverlayLearn","SScore","DistanceContainer","PQContainer","DistanceItem","PQItem","ExploreContainer","GameOverlayLearn","step","Distances","Object","keys","allDistances","map","nodeId","distance","className","PQueue","allPQ","node","data","priority","exploreOptions","option","score","stepFn","PriorityQueue","maxSize","isNaN","container","console","log","isFull","currElem","Element","addedFlag","i","splice","isEmpty","pop","prototype","dijkstrasAlgorithm","graph","startNode","adjList","graphObj","forEach","edge","weight","createAdjListGraph","distances","prev","pq","enqueue","Infinity","JSON","parse","stringify","minNode","dequeue","currNode","neighbor","alt","finalDistances","colors","localNode","localVisited","normal","highlighted","Learn","componentDidMount","setTimeout","renderGraph","componentDidUpdate","handleClick","network","on","obj","net","unselectAll","entries","currentNode","getConnectedNodes","includes","move","nextNodeId","traversedEdgeId","edgeWeight","newState","getConnectedEdges","edgeId","body","node1","fromId","node2","toId","options","index","visitedNodes","indexOf","visitedEdges","clearSelection","selectNodesFromList","selectEdgesFromList","selectNode","selectEdges","forceUpdate","background","getAdjNodes","adjNodes","values","getNetwork","getEdges","getNodes","dijkstras","dijkstra","defaultGraph","endNode","shortestPaths","currentWeight","margin","graphOptions","vis","ProgressBar","require","SGameOverlay","SMoveProgress","moving","GameOverlay","componentWillReceiveProps","newProps","progress","Circle","easing","text","fill","animate","duration","destroy","progressBar","playerName","playerScore","opponentName","opponentScore","process","PORT","remoteNode","remoteVisited","finalNode","events","select","event","GameContainer","socket","io","query","activateSockets","emit","game","gameState","opponentId","players","player","gameId","gameGraph","playerId","endGame","winner","componentWillUnmount","disconnect","addToMatchHistory","sendPlayerMove","nextNode","result","matches","localStorage","getItem","setItem","vertices","u","v","opponent","finalNodeId","Math","pow","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24522e42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport styled from \"styled-components\";\n\nconst theme = {\n  primary: \"#2453c9\",\n  creme: \"#fffcf5\"\n};\n\nconst SMainMenu = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  background-color: ${theme.creme};\n\n  padding-top: 10vh;\n\n  h1 {\n    font-size: 5em;\n    margin-bottom: 10vh;\n  }\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 2.5em;\n      margin: 15px 0px 10vh;\n    }\n  }\n`;\n\nconst SButton = styled.div`\n  /* outline: 1px black dotted; */\n  div {\n    display: inline-block;\n    background-color: ${theme.primary};\n    margin: 15px;\n    padding: 15px 50px;\n    border-radius: 50px;\n    p,\n    a {\n      transition: all 100ms ease-out;\n      font-size: 1.5em;\n      color: white;\n    }\n\n    :hover {\n      cursor: pointer;\n      p,\n      a {\n        color: limegreen;\n      }\n    }\n  }\n`;\n\nclass MainMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <SMainMenu>\n        <h1>Dijkstra's Arena</h1>\n        <SButton onClick={() => this.props.history.push(\"/learn\")}>\n          <div>\n            <p>Learn Dijkstra</p>\n          </div>\n        </SButton>\n        <SButton onClick={() => this.props.history.push(\"/game\")}>\n          <div>\n            <p>Compete</p>\n          </div>\n        </SButton>\n        <SButton>\n          <div>\n            <a\n              href=\"https://github.com/rogerwangcs/Dijkstras-Arena\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Algorithms Report\n            </a>\n          </div>\n        </SButton>\n        <SButton>\n          <div>\n            <a\n              href=\"https://github.com/rogerwangcs/Dijkstras-Arena\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Source Code\n            </a>\n          </div>\n        </SButton>\n      </SMainMenu>\n    );\n  }\n}\n\nexport default withRouter(MainMenu);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router\";\n\nconst SLobby = styled.div`\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n\n  h1 {\n    margin: 100px;\n  }\n`;\n\nclass Lobby extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      queued: false\n    };\n  }\n\n  // componentDidMount = () => {\n  //   this.props.enterQueue(\"test user\");\n  // };\n\n  onInput = e => {\n    e.preventDefault();\n    this.setState({ name: e.target.value });\n  };\n\n  submitQueue = () => {\n    if (this.state.name.length > 0) {\n      this.setState({ queued: true });\n      this.props.enterQueue(this.state.name.substring(0, 12));\n    } else {\n      alert(\"Enter a name\");\n    }\n  };\n\n  render() {\n    return (\n      <SLobby>\n        <h1>Lobby</h1>\n        {this.state.queued ? (\n          <React.Fragment>\n            <h1>Matching with Opponents...</h1>\n            <button\n              style={{ fontSize: \"36px\" }}\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            >\n              Cancel\n            </button>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <input\n              value={this.state.name}\n              onChange={this.onInput}\n              placeholder=\"Your name\"\n              style={{ fontSize: \"36px\" }}\n            ></input>\n            <button style={{ fontSize: \"36px\" }} onClick={this.submitQueue}>\n              Play\n            </button>\n          </React.Fragment>\n        )}\n      </SLobby>\n    );\n  }\n}\n\nexport default withRouter(Lobby);\n","export default {\n  width: \"100%\",\n  height: \"100%\",\n  autoResize: true,\n  nodes: {\n    fixed: {\n      x: false,\n      y: false\n    },\n    shape: \"dot\",\n    size: 35,\n    borderWidth: 1,\n    borderWidthSelected: 3,\n    color: {\n      border: \"white\"\n    },\n    font: {\n      size: 25,\n      align: \"center\"\n    }\n  },\n  edges: {\n    width: 5,\n    color: {\n      color: \"#D3D3D3\",\n      highlight: \"#797979\",\n      hover: \"#797979\",\n      opacity: 0.75\n    },\n    font: {\n      size: 25,\n      strokeWidth: 10\n    },\n    arrows: {\n      to: { enabled: false, scaleFactor: 1, type: \"arrow\" },\n      from: { enabled: false, scaleFactor: 1, type: \"arrow\" }\n    }\n  },\n  interaction: {\n    dragNodes: true,\n    dragView: true,\n    zoomView: true,\n    selectConnectedEdges: false\n  }\n};\n","let font = { vadjust: -40 };\n\nexport default {\n  nodes: [\n    {\n      id: \"A\",\n      label: \"A\",\n      font: font\n    },\n    { id: \"B\", label: \"B\", font: font },\n    { id: \"C\", label: \"C\", font: font },\n    { id: \"D\", label: \"D\", font: font },\n    { id: \"E\", label: \"E\", font: font },\n    { id: \"FIN\", label: \"FIN\", font: font }\n  ],\n  edges: [\n    { from: \"A\", to: \"B\", label: 4 },\n    { from: \"B\", to: \"C\", label: 1 },\n    { from: \"A\", to: \"C\", label: 2 },\n    { from: \"C\", to: \"D\", label: 8 },\n    { from: \"B\", to: \"D\", label: 5 },\n    { from: \"C\", to: \"E\", label: 10 },\n    { from: \"D\", to: \"FIN\", label: 6 },\n    { from: \"D\", to: \"E\", label: 2 },\n    { from: \"E\", to: \"FIN\", label: 5 }\n  ]\n};\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst SGameOverlayLearn = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n`;\n\nconst SScore = styled.div`\n  margin-top: 15px;\n  padding: 25px;\n  display: inline-block;\n  background-color: #6a758faa;\n  border-radius: 15px;\n  color: white;\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1em;\n    }\n  }\n`;\n\nconst DistanceContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\n\nconst PQContainer = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n\nconst DistanceItem = styled.div`\n  .block {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    border: 1px solid black;\n    h1 {\n      line-height: 64px;\n      margin: auto;\n      vertical-align: center;\n    }\n\n    @media (max-width: 500px) {\n      width: 24px;\n      height: 24px;\n      h1 {\n        font-size: 1em;\n        line-height: 24px;\n      }\n    }\n  }\n`;\n\nconst PQItem = styled.div`\n  .block {\n    display: inline-block;\n    width: 64px;\n    height: 64px;\n    background-color: white;\n    border: 1px solid black;\n    /* border-radius: 50%; */\n    h1 {\n      line-height: 64px;\n      margin: auto;\n      vertical-align: center;\n    }\n\n    @media (max-width: 500px) {\n      width: 24px;\n      height: 24px;\n      h1 {\n        font-size: 1em;\n        line-height: 24px;\n      }\n    }\n  }\n`;\n\nconst ExploreContainer = styled.div`\n  position: absolute;\n  top: 75vh;\n  left: 50%;\n  transform: translate(-50%);\n  display: flex;\n  .node {\n    width: 100px;\n    height: 100px;\n    margin: 25px;\n    border-radius: 50%;\n    background-color: gray;\n    border: 10px solid lightgray;\n    h1 {\n      line-height: 100px;\n      font-size: 3em;\n      color: white;\n    }\n    :hover {\n      cursor: pointer;\n    }\n\n    @media (max-width: 500px) {\n      margin: 15px;\n      width: 72px;\n      height: 72px;\n      border: 5px solid lightgray;\n      h1 {\n        line-height: 72px;\n        font-size: 2em;\n      }\n    }\n  }\n`;\n\nclass GameOverlayLearn extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const step = this.props.step;\n\n    const Distances = Object.keys(this.props.allDistances[step]).map(nodeId => {\n      let distance = this.props.allDistances[step][nodeId];\n      if (this.props.allDistances[step][nodeId] === null) {\n        distance = \"∞\";\n      }\n      return (\n        <DistanceItem>\n          <div className=\"block\">\n            <h1>{nodeId}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{distance}</h1>\n          </div>\n        </DistanceItem>\n      );\n    });\n\n    const PQueue = this.props.allPQ[step].map(node => {\n      return (\n        <PQItem>\n          <div className=\"block\">\n            <h1>{node.data}</h1>\n          </div>\n          <div className=\"block\">\n            <h1>{node.priority}</h1>\n          </div>\n        </PQItem>\n      );\n    });\n\n    const ExploreOptions = this.props.exploreOptions.map(option => {\n      return (\n        <div className=\"node\">\n          <h1>{option.node}</h1>\n        </div>\n      );\n    });\n\n    return (\n      <SGameOverlayLearn>\n        <SScore>\n          <h1>{this.props.score}</h1>\n        </SScore>\n        <DistanceContainer>{Distances}</DistanceContainer>\n        <PQContainer>{PQueue}</PQContainer>\n        {/* <ExploreContainer>{ExploreOptions}</ExploreContainer> */}\n        <ExploreContainer>\n          <div className=\"node\" onClick={this.props.stepFn}>\n            <h1>Step</h1>\n          </div>\n        </ExploreContainer>\n      </SGameOverlayLearn>\n    );\n  }\n}\n\nexport default GameOverlayLearn;\n","class PriorityQueue {\n  constructor(maxSize) {\n    // Set default max size if not provided\n    if (isNaN(maxSize)) {\n      maxSize = 10;\n    }\n    this.maxSize = maxSize;\n    // Init an array that'll contain the queue values.\n    this.container = [];\n  }\n  // Helper function to display all values while developing\n  display() {\n    console.log(this.container);\n  }\n  // Checks if queue is empty\n  isEmpty() {\n    return this.container.length === 0;\n  }\n  // checks if queue is full\n  isFull() {\n    return this.container.length >= this.maxSize;\n  }\n  enqueue(data, priority) {\n    // Check if Queue is full\n    if (this.isFull()) {\n      console.log(\"Queue Overflow!\");\n      return;\n    }\n    let currElem = new this.Element(data, priority);\n    let addedFlag = false;\n    // Since we want to add elements to end, we'll just push them.\n    for (let i = 0; i < this.container.length; i++) {\n      if (currElem.priority < this.container[i].priority) {\n        this.container.splice(i, 0, currElem);\n        addedFlag = true;\n        break;\n      }\n    }\n    if (!addedFlag) {\n      this.container.push(currElem);\n    }\n  }\n  dequeue() {\n    // Check if empty\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    return this.container.pop();\n  }\n  peek() {\n    if (this.isEmpty()) {\n      console.log(\"Queue Underflow!\");\n      return;\n    }\n    return this.container[this.container.length - 1];\n  }\n  clear() {\n    this.container = [];\n  }\n}\n// Create an inner class that we'll use to create new nodes in the queue\n// Each element has some data and a priority\nPriorityQueue.prototype.Element = class {\n  constructor(data, priority) {\n    this.data = data;\n    this.priority = priority;\n  }\n};\n\nexport { PriorityQueue };\n","import { PriorityQueue } from \"./PriorityQueue.js\";\n\nconst createAdjListGraph = graphObj => {\n  let adjList = {};\n  graphObj.nodes.forEach(node => {\n    adjList[node.id] = [];\n  });\n  graphObj.edges.forEach(edge => {\n    adjList[edge.from].push({ node: edge.to, weight: edge.label });\n    adjList[edge.to].push({ node: edge.from, weight: edge.label });\n  });\n  return adjList;\n};\n\nconst dijkstrasAlgorithm = (graph, startNode) => {\n  let adjList = createAdjListGraph(graph);\n  let distances = {};\n\n  // Stores the reference to previous nodes\n  let prev = {};\n  let pq = new PriorityQueue(adjList.length * adjList.length);\n\n  // Set distances to all nodes to be infinite except startNode\n  distances[startNode] = 0;\n  pq.enqueue(startNode, 0);\n  Object.keys(adjList).forEach(node => {\n    if (node != startNode) {\n      distances[node] = Infinity;\n    }\n    prev[node] = null;\n  });\n\n  let allDistances = [];\n  let allPQ = [];\n\n  while (!pq.isEmpty()) {\n    allDistances.push(JSON.parse(JSON.stringify(distances)));\n    allPQ.push(JSON.parse(JSON.stringify(pq.container)));\n    let minNode = pq.dequeue();\n    let currNode = minNode.data;\n    let weight = minNode.priority;\n    adjList[currNode].forEach(neighbor => {\n      let alt;\n      distances[currNode] === Infinity\n        ? (alt = neighbor.weight)\n        : (alt = distances[currNode] + neighbor.weight);\n      if (alt < distances[neighbor.node]) {\n        distances[neighbor.node] = alt;\n        prev[neighbor.node] = currNode;\n        pq.enqueue(neighbor.node, distances[neighbor.node]);\n        allDistances.push(JSON.parse(JSON.stringify(distances)));\n        allPQ.push(JSON.parse(JSON.stringify(pq.container)));\n      }\n    });\n  }\n  allDistances.push(JSON.parse(JSON.stringify(distances)));\n  allPQ.push(JSON.parse(JSON.stringify(pq.container)));\n  let data = {\n    allDistances: allDistances,\n    allPQ: allPQ,\n    finalDistances: distances\n  };\n  return data;\n};\n\nexport default dijkstrasAlgorithm;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Graph from \"vis-react\";\nimport graphOptions from \"../utils/graphOptions\";\nimport defaultGraph from \"../utils/defaultGraph\";\nimport GameOverlayLearn from \"../components/GameOverlayLearn\";\nimport dijkstra from \"../utils/dijkstras\";\n\nconst colors = {\n  localNode: \"#185fab\",\n  localVisited: \"#66c9ed\",\n  normal: \"#c3cdde\",\n  highlighted: \"#36EEE2\"\n};\n\nclass Learn extends Component {\n  constructor(props) {\n    super(props);\n\n    let dijkstras = dijkstra(defaultGraph, \"A\");\n\n    this.state = {\n      visitedNodes: [],\n      visitedEdges: [],\n      network: null,\n      currentNode: \"A\",\n      endNode: \"FIN\",\n      score: 0,\n      shortestPaths: {},\n      distances: dijkstras.finalDistances,\n      allDistances: dijkstras.allDistances,\n      allPQ: dijkstras.allPQ,\n      step: 0,\n      currentWeight: 0,\n      exploreOptions: [\n        { node: \"A\", weight: 3 },\n        { node: \"B\", weight: 2 },\n        { node: \"C\", weight: 4 }\n      ]\n    };\n  }\n\n  componentDidMount = () => {\n    setTimeout(() => {\n      this.renderGraph();\n    }, 50);\n  };\n\n  componentDidUpdate = () => {\n    // Handles Click in Graph\n    // Need both to handle client syncing\n    this.handleClick({ nodes: Object });\n    this.state.network.on(\"click\", obj => {\n      this.handleClick(obj);\n    });\n  };\n\n  step = () => {\n    if (this.state.step < this.state.allPQ.length - 1) {\n      this.setState({ step: this.state.step + 1 }, () => this.renderGraph());\n    }\n  };\n\n  handleClick = obj => {\n    // destructure\n    const net = this.state.network;\n    if (net == null) return;\n\n    // get rid of annoying built in select\n    net.unselectAll();\n    // skip if no nodes selected\n    if (Object.entries(obj.nodes).length === 0) return;\n    // skip if selected node is same as current node\n    if (obj.nodes[0] === this.state.currentNode) return;\n    // skip if not adjaent node\n    let availableNodes = net.getConnectedNodes(this.state.currentNode);\n    if (!availableNodes.includes(obj.nodes[0])) return;\n\n    // Make Move\n    this.move(obj.nodes[0]);\n  };\n\n  move = nextNodeId => {\n    // State setup\n    const net = this.state.network;\n    let newState = this.state;\n\n    //Add edge traversed to score\n    const edges = net.getConnectedEdges(nextNodeId);\n    let traversedEdgeId;\n    let edgeWeight;\n    edges.forEach(edgeId => {\n      const edge = this.state.network.body.edges[edgeId];\n      const node1 = edge.fromId;\n      const node2 = edge.toId;\n\n      if (\n        (node1 === this.state.currentNode && node2 === nextNodeId) ||\n        (node2 === this.state.currentNode && node1 === nextNodeId)\n      ) {\n        traversedEdgeId = edge.fromId + \"-\" + edge.toId;\n        edgeWeight = edge.options.label;\n        newState.score += edgeWeight;\n      }\n    });\n\n    // add to visited nodes and edges\n    let index = this.state.visitedNodes.indexOf(this.state.currentNode);\n    if (index === -1) newState.visitedNodes.push(newState.currentNode);\n    index = this.state.visitedEdges.indexOf(traversedEdgeId);\n    if (index === -1) newState.visitedEdges.push(traversedEdgeId);\n\n    // Update local state\n    newState.currentNode = nextNodeId;\n    this.setState(newState, () => this.renderGraph());\n  };\n\n  renderGraph = () => {\n    this.clearSelection();\n\n    // Highlight local player visited nodes and edges\n    if (this.state.visitedNodes.length !== 0)\n      this.selectNodesFromList(this.state.visitedNodes, colors.localVisited);\n    if (this.state.visitedEdges.length !== 0)\n      this.selectEdgesFromList(this.state.visitedEdges, colors.localVisited);\n\n    // Highlight local player node and edges\n    this.selectNode(this.state.currentNode, colors.localNode);\n    this.selectEdges(this.state.currentNode, colors.localNode);\n\n    this.state.allPQ[this.state.step].forEach(node => {\n      this.selectNode(node.data, colors.highlighted);\n    });\n    // this.selectNode(\n    //   this.state.allPQ[this.state.step][0].data,\n    //   colors.highlighted\n    // );\n\n    this.forceUpdate();\n  };\n\n  clearSelection = () => {\n    const nodes = this.state.network.body.nodes;\n    Object.keys(nodes).forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.size = 25;\n      node.options.color.background = colors.normal;\n    });\n\n    let edges = this.state.network.body.edges;\n    Object.keys(edges).forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = colors.normal;\n      edge.options.width = 5;\n    });\n  };\n\n  // nodeId: str, color: str\n  selectNode = (nodeId, color) => {\n    let node = this.state.network.body.nodes[nodeId];\n    node.options.color.background = color;\n    node.options.size = 20;\n  };\n\n  /**\n   * nodeId str, color: str\n   * Color edges around given node\n   */\n  selectEdges = (nodeId, color) => {\n    let edges = this.state.network.getConnectedEdges(nodeId);\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getAdjNodes = () => {\n    if (this.network == null) {\n      setTimeout(() => this.getAdjNodes(), 100);\n      return;\n    }\n    let edges = this.state.network.getConnectedEdges(this.state.currentNode);\n    let adjNodes = [];\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      adjNodes.push(edge.toId);\n    });\n    console.log(adjNodes);\n    return adjNodes;\n  };\n\n  selectNodesFromList = (nodes, color) => {\n    nodes.forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.color.background = color;\n      node.options.size = 20;\n    });\n  };\n\n  selectEdgesFromList = (edges, color) => {\n    edges.forEach(edgeId => {\n      let edge = null;\n      Object.values(this.state.network.body.edges).forEach(e => {\n        if (e.fromId + \"-\" + e.toId === edgeId) edge = e;\n      });\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getNetwork = data => {\n    this.setState({ network: data });\n  };\n  getEdges = data => {\n    // console.log(data);\n  };\n  getNodes = data => {\n    // console.log(data);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Graph\n          style={{ width: \"100%\", height: \"100%\", margin: \"0px\" }}\n          graph={defaultGraph}\n          options={graphOptions}\n          getNetwork={this.getNetwork}\n          getEdges={this.getEdges}\n          getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n        <GameOverlayLearn\n          score={this.state.score}\n          allDistances={this.state.allDistances}\n          allPQ={this.state.allPQ}\n          step={this.state.step}\n          stepFn={this.step}\n          exploreOptions={this.state.exploreOptions}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(Learn);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst ProgressBar = require(\"progressbar.js\");\n\nconst SGameOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n`;\n\nconst SMoveProgress = styled.div`\n  display: ${props => (props.moving ? \"block\" : \"none\")};\n  position: absolute;\n  top: 65vh;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 150px;\n  height: 150px;\n\n  @media (max-width: 500px) {\n    width: 75px;\n    height: 75px;\n    top: 60vh;\n  }\n`;\n\nconst SScore = styled.div`\n  margin-top: 15px;\n  padding: 25px;\n  display: inline-block;\n  background-color: #6a758faa;\n  border-radius: 15px;\n  color: white;\n\n  @media (max-width: 500px) {\n    h1 {\n      font-size: 1em;\n    }\n  }\n`;\n\nclass GameOverlay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progressBar: null\n    };\n  }\n\n  componentWillReceiveProps = newProps => {\n    if (newProps.moving && newProps.moving !== this.props.moving) {\n      let progress = new ProgressBar.Circle(\"#moveProgress\", {\n        strokeWidth: 15,\n        easing: \"easeOut\",\n        color: \"#FFEA82\",\n        text: {\n          value: \"Moving\"\n        },\n        fill: \"rgba(0, 0, 0, 0.8)\"\n      });\n\n      progress.animate(\n        1,\n        {\n          duration: newProps.currentWeight * 400\n        },\n        () => {\n          progress.destroy();\n        }\n      );\n    }\n  };\n\n  componentDidMount = () => {};\n\n  render() {\n    const adjNodes = this.props.getAdjNodes();\n    let {\n      playerName,\n      playerScore,\n      opponentName,\n      opponentScore\n    } = this.props.data;\n\n    return (\n      <SGameOverlay>\n        <SScore>\n          <h1>\n            {playerScore +\n              \"  \" +\n              playerName +\n              \" | \" +\n              opponentName +\n              \"  \" +\n              opponentScore}\n          </h1>\n        </SScore>\n        <SMoveProgress id=\"moveProgress\" moving={this.props.moving} />\n      </SGameOverlay>\n    );\n  }\n}\n\nexport default GameOverlay;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Graph from \"vis-react\";\nimport Lobby from \"./Lobby\";\nimport GameOverlay from \"../components/GameOverlay\";\nimport graphOptions from \"../utils/graphOptions\";\nimport defaultGraph from \"../utils/defaultGraph\";\n// import dijkstras from \"../utils/dijkstras\";\nimport io from \"socket.io-client\";\n\nconst socketUrl = \"https://localhost:\" + process.env.PORT || 4000;\n// const socketUrl = \"http://localhost:4000/\";\n// const socketUrl = \"136.167.212.5:4000\";\n\nconst colors = {\n  localNode: \"#185fab\",\n  localVisited: \"#66c9ed\",\n  remoteNode: \"#cf4121\",\n  remoteVisited: \"#ff8870\",\n  normal: \"#c3cdde\",\n  finalNode: \"green\"\n};\n\nvar events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n  }\n};\n\nclass GameContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: \"\",\n      gameId: \"\",\n      playerId: null,\n      playerName: null,\n      opponentId: null,\n      gameState: null,\n      gameGraph: null,\n      network: null,\n      currentNode: 1,\n      startNode: 1,\n      endNode: 15,\n      score: 0,\n      distances: {},\n      moving: false,\n      currentWeight: 0\n    };\n  }\n\n  enterQueue = playerName => {\n    this.setState(\n      {\n        socket: io({\n          query: {\n            name: playerName\n          }\n        })\n      },\n      () => {\n        this.activateSockets(playerName);\n      }\n    );\n  };\n\n  // code runs right as graph loads\n  activateSockets = playerName => {\n    this.state.socket.emit(\"setName\", playerName);\n\n    this.state.socket.on(\"startGame\", game => {\n      let gameState = game.gameState;\n      // Set opponentId\n      let opponentId = \"\";\n      let opponentName = \"\";\n      Object.keys(gameState.players).forEach(player => {\n        if (player !== this.state.socket.id) {\n          opponentId = player;\n          opponentName = gameState.players[player].name;\n        }\n      });\n\n      this.setState({\n        playerName: playerName,\n        opponentName: opponentName,\n        gameId: game.id,\n        gameState: gameState,\n        gameGraph: game.gameGraph,\n        startNode: gameState.players[this.state.socket.id].currentNode,\n        currentNode: gameState.players[this.state.socket.id].currentNode,\n        playerId: this.state.socket.id,\n        opponentId: opponentId\n      });\n      setTimeout(() => this.renderGraph(gameState), 10);\n    });\n\n    this.state.socket.on(\"getStateServerEmit\", data => {\n      let gameState = data.gameState;\n      this.setState({\n        gameState: gameState,\n        currentNode: gameState.players[this.state.socket.id].currentNode\n      });\n      setTimeout(() => this.renderGraph(gameState), 10);\n    });\n\n    this.state.socket.on(\"endGame\", data => {\n      this.endGame(data.winner);\n    });\n  };\n\n  componentWillUnmount = () => {\n    if (this.state.socket) {\n      this.state.socket.disconnect();\n      this.addToMatchHistory(\n        \"Abandoned ship vs \" + this.state.opponentName || \"Anonymous\"\n      );\n    }\n  };\n\n  componentDidUpdate = () => {\n    const net = this.state.network;\n    if (net == null) return;\n\n    // Handles Click in Graph\n    // Need both to handle client syncing\n    this.handleClick({ nodes: Object });\n    this.state.network.on(\"click\", obj => {\n      this.handleClick(obj);\n    });\n  };\n\n  handleClick = obj => {\n    // destructure\n    const net = this.state.network;\n    if (net == null) return;\n\n    // get rid of annoying built in select\n    net.unselectAll();\n    // skip if currently moving\n    if (this.state.moving) return;\n    // skip if no nodes selected\n    if (Object.entries(obj.nodes).length === 0) return;\n    // skip if selected node is same as current node\n    if (obj.nodes[0] === this.state.currentNode) return;\n    // skip if not adjaent node\n    let availableNodes = net.getConnectedNodes(this.state.currentNode);\n    if (!availableNodes.includes(obj.nodes[0])) return;\n\n    // Make Move\n    this.move(obj.nodes[0]);\n  };\n\n  move = nextNodeId => {\n    // State setup\n    const net = this.state.network;\n    let newState = this.state;\n\n    //Add edge traversed to score\n    const edges = net.getConnectedEdges(nextNodeId);\n    let traversedEdgeId;\n    let edgeWeight;\n    edges.forEach(edgeId => {\n      const edge = this.state.network.body.edges[edgeId];\n      const node1 = edge.fromId;\n      const node2 = edge.toId;\n\n      if (\n        (node1 === this.state.currentNode && node2 === nextNodeId) ||\n        (node2 === this.state.currentNode && node1 === nextNodeId)\n      ) {\n        traversedEdgeId = edge.fromId + \"-\" + edge.toId;\n        edgeWeight = edge.options.label;\n      }\n    });\n    // Send state to server\n    this.sendPlayerMove(nextNodeId, traversedEdgeId, edgeWeight);\n\n    // wait\n    newState.moving = true;\n    newState.currentWeight = edgeWeight;\n    setTimeout(() => this.setState({ moving: false }), edgeWeight * 400);\n\n    // Update local state\n    newState.currentNode = nextNodeId;\n    this.setState(newState);\n  };\n\n  // send player move to server\n  sendPlayerMove = (nextNode, edge, edgeWeight) => {\n    this.state.socket.emit(\"playerMoveClientEmit\", {\n      gameId: this.state.gameId,\n      currentNode: this.state.currentNode,\n      score: (this.state.score += edgeWeight),\n      nextNode: nextNode,\n      edge: edge\n    });\n  };\n\n  endGame = winner => {\n    if (!winner) {\n      this.props.history.push(\"/\");\n      return;\n    }\n    if (this.state.playerId === winner) {\n      alert(\"you win!\");\n    } else {\n      alert(\"you lose!\");\n    }\n    setTimeout(() => this.props.history.push(\"/\"), 3000);\n  };\n\n  addToMatchHistory = result => {\n    let matches = JSON.parse(localStorage.getItem(\"matchHistory\"));\n    matches.push(result);\n    localStorage.setItem(\"matchHistory\", JSON.stringify(matches));\n  };\n\n  dijkstras = (vertices, edges, u, v) => {};\n\n  renderGraph = () => {\n    this.clearSelection();\n\n    const players = this.state.gameState.players;\n    const player = players[this.state.playerId];\n    const opponent = players[this.state.opponentId];\n\n    // Highlight opponent visited nodes and edges\n    if (opponent.visitedNodes.length !== 0)\n      this.selectNodesFromList(opponent.visitedNodes, colors.remoteVisited);\n    if (opponent.visitedEdges.length !== 0)\n      this.selectEdgesFromList(opponent.visitedEdges, colors.remoteVisited);\n\n    // Highlight local player visited nodes and edges\n    if (player.visitedNodes.length !== 0)\n      this.selectNodesFromList(player.visitedNodes, colors.localVisited);\n    if (player.visitedEdges.length !== 0)\n      this.selectEdgesFromList(player.visitedEdges, colors.localVisited);\n\n    // Highlights opponent node and edges\n    this.selectNode(opponent.currentNode, colors.remoteNode);\n    this.selectEdges(opponent.currentNode, colors.remoteNode);\n    // Highlight local player node and edges\n    this.selectNode(player.currentNode, colors.localNode);\n    this.selectEdges(player.currentNode, colors.localNode);\n\n    // Highlight final node\n    let finalNodeId = Math.pow(\n      (this.state.gameGraph.nodes.length - 1) / 2 + 1,\n      2\n    );\n    this.selectNode(finalNodeId, colors.finalNode);\n\n    this.forceUpdate();\n  };\n\n  clearSelection = () => {\n    const nodes = this.state.network.body.nodes;\n    Object.keys(nodes).forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.size = 25;\n      node.options.color.background = colors.normal;\n    });\n\n    let edges = this.state.network.body.edges;\n    Object.keys(edges).forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = colors.normal;\n      edge.options.width = 5;\n    });\n  };\n\n  // nodeId: str, color: str\n  selectNode = (nodeId, color) => {\n    let node = this.state.network.body.nodes[nodeId];\n    node.options.color.background = color;\n    node.options.size = 20;\n    return node;\n  };\n\n  /**\n   * nodeId str, color: str\n   * Color edges around given node\n   */\n  selectEdges = (nodeId, color) => {\n    let edges = this.state.network.getConnectedEdges(nodeId);\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getAdjNodes = () => {\n    if (this.network == null) {\n      setTimeout(() => this.getAdjNodes(), 100);\n      return;\n    }\n    let edges = this.state.network.getConnectedEdges(this.state.currentNode);\n    let adjNodes = [];\n    edges.forEach(edgeId => {\n      let edge = this.state.network.body.edges[edgeId];\n      adjNodes.push(edge.toId);\n    });\n    return adjNodes;\n  };\n\n  selectNodesFromList = (nodes, color) => {\n    nodes.forEach(nodeId => {\n      let node = this.state.network.body.nodes[nodeId];\n      node.options.color.background = color;\n      node.options.size = 20;\n    });\n  };\n\n  selectEdgesFromList = (edges, color) => {\n    edges.forEach(edgeId => {\n      let edge = null;\n      Object.values(this.state.network.body.edges).forEach(e => {\n        if (e.fromId + \"-\" + e.toId === edgeId) edge = e;\n      });\n      edge.options.color.color = color;\n      edge.options.width = 10;\n    });\n  };\n\n  getNetwork = data => {\n    this.setState({ network: data });\n  };\n  getEdges = data => {\n    // console.log(data);\n  };\n  getNodes = data => {\n    // console.log(data);\n  };\n\n  render() {\n    // Makes sure client has received gamestate and also has setstate into state\n    if (this.state.playerId == null)\n      return <Lobby enterQueue={this.enterQueue} />;\n    return (\n      <React.Fragment>\n        <Graph\n          style={{ width: \"100%\", height: \"100%\", margin: \"0px\" }}\n          graph={this.state.gameGraph}\n          options={graphOptions}\n          events={events}\n          getNetwork={this.getNetwork}\n          getEdges={this.getEdges}\n          getNodes={this.getNodes}\n          vis={vis => (this.vis = vis)}\n        />\n        <GameOverlay\n          getAdjNodes={this.getAdjNodes}\n          moving={this.state.moving}\n          currentWeight={this.state.currentWeight}\n          data={{\n            playerName: this.state.playerName,\n            opponentName: this.state.opponentName,\n            playerScore: this.state.gameState.players[this.state.playerId][\n              \"score\"\n            ],\n            opponentScore: this.state.gameState.players[this.state.opponentId][\n              \"score\"\n            ]\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(GameContainer);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport MainMenu from \"./screens/MainMenu\";\nimport Lobby from \"./screens/Lobby\";\nimport Learn from \"./screens/Learn\";\nimport GameContainer from \"./screens/GameContainer.jsx\";\n\nconst socket = null;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount = () => {\n    if (!localStorage.getItem(\"matchHistory\"))\n      localStorage.setItem(\"matchHistory\", JSON.stringify([]));\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/\"}\n              component={MainMenu}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/learn\"}\n              component={Learn}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/lobby\"}\n              component={() => <Lobby />}\n            />\n            <Route\n              exact\n              path={process.env.PUBLIC_URL + \"/game\"}\n              component={() => <GameContainer socket={socket} />}\n            />\n            <Redirect\n              from={process.env.PUBLIC_URL + \"/*\"}\n              to={process.env.PUBLIC_URL + \"/\"}\n            />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}